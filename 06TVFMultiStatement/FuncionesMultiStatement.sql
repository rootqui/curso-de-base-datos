-- Funciones TVF Multistatement

CREATE FUNCTION <Nombre>
(
	<Parametros>
)
RETURNS <VARIABLE> TABLE 
(
	<COLUMNAS>
)
AS
BEGIN
	<INSTRUCCIONES>

	RETURN
END
GO


--1. Implementar tvf MULTISTATEMENT, reciba un año y un mes y retorne el calendario de ese periodo

DROP TABLE #CALENDARIO
DECLARE 
	@YEAR SMALLINT = 2023,
	@MONTH TINYINT = 2

DECLARE @FECINI DATE, @FECFIN DATE

SET @FECINI = DATEFROMPARTS(@YEAR, @MONTH, 1)
SET @FECFIN = EOMONTH(@FECINI)

CREATE TABLE #CALENDARIO (FECHA DATE)

WHILE @FECINI <= @FECFIN
BEGIN
	INSERT INTO #CALENDARIO (FECHA)
	VALUES (@FECINI)

	--SELECT @FECINI
	SET @FECINI = DATEADD(D, 1, @FECINI)
END
SELECT * FROM #CALENDARIO 

CREATE FUNCTION uTF_Calendario_Anio_Mes
(
	@YEAR SMALLINT,
	@MONTH TINYINT
)
RETURNS @CALENDARIO TABLE 
(
	FECHA DATE
)
AS
BEGIN
	DECLARE @FECINI DATE --, @FECFIN DATE

	SET @FECINI = DATEFROMPARTS(@YEAR, @MONTH, 1)
	--SET @FECFIN = EOMONTH(@FECINI)

	--CREATE TABLE #CALENDARIO (FECHA DATE)

	WHILE @FECINI <= EOMONTH(@FECINI)
	BEGIN
		INSERT INTO @CALENDARIO (FECHA)
		VALUES (@FECINI)

		--SELECT @FECINI
		SET @FECINI = DATEADD(D, 1, @FECINI)
	END

	RETURN
END
GO

SELECT * FROM uTF_Calendario_Anio_Mes(2023, 5)

DECLARE @FECHA DATE = '20230530'
SELECT EOMONTH(@FECHA)


-- 2. Implementar funcion que reciba 3 parametros: codigo producto, fecha inicial y fecha final, y que retorne el analisis evolutivo acumulado por dia
-- por el importe de venta por producto

ID_PRODUCTO, NOMBRE_PRODUCTO, FECHA, LINETOTAL ACUMULADO

1, 'PRODUCT 1', '2011-01-01', 10
1, 'PRODUCT 1', '2011-01-15', 10+25

DECLARE 
	@FECINI DATE = '20110701',
	@FECFEC DATE = '20110731',
	@PRODUCTID INT = 749

SELECT D.ProductID, H.OrderDate, SUM(D.LineTotal) AS LineTotal, CAST(0 AS MONEY) AS LineTotalAcum,
	ROW_NUMBER() OVER (ORDER BY H.OrderDate) AS ORDEN
INTO #TEMP -- DROP TABLE #TEMP
FROM SALES.SalesOrderHeader H 
	INNER JOIN SALES.SalesOrderDetail D ON H.SalesOrderID = D.SalesOrderID 
WHERE H.OrderDate BETWEEN @FECINI AND @FECFEC
	AND D.ProductID = @PRODUCTID
GROUP BY D.ProductID, H.OrderDate

SELECT * FROM #TEMP

DECLARE @ORDEN_INI INT = 1, @ORDEN_FIN INT = (SELECT MAX(ORDEN) FROM #TEMP)

WHILE @ORDEN_INI <= @ORDEN_FIN
BEGIN
--	SELECT * FROM #TEMP WHERE ORDEN = @ORDEN_INI
	UPDATE #TEMP
	SET LineTotalAcum = LineTotal + COALESCE((SELECT LineTotalAcum FROM #TEMP WHERE ORDEN = @ORDEN_INI - 1), 0)
	WHERE ORDEN = @ORDEN_INI

	SET @ORDEN_INI = @ORDEN_INI + 1  
END
SELECT * FROM #TEMP


CREATE FUNCTION uTF_Analisis_Producto
(
	@FECINI DATE,
	@FECFEC DATE,
	@PRODUCTID INT
)
RETURNS @ANALISIS TABLE 
(
	ProductID int,
	OrderDate date,
	LineTotal money,
	LineTotalAcum money,
	Orden int
)
AS
BEGIN
	INSERT INTO @ANALISIS (ProductID, OrderDate, LineTotal, LineTotalAcum, Orden)
	SELECT D.ProductID, H.OrderDate, SUM(D.LineTotal) AS LineTotal, CAST(0 AS MONEY) AS LineTotalAcum,
		ROW_NUMBER() OVER (ORDER BY H.OrderDate) AS ORDEN
	--INTO #TEMP
	FROM SALES.SalesOrderHeader H 
		INNER JOIN SALES.SalesOrderDetail D ON H.SalesOrderID = D.SalesOrderID 
	WHERE H.OrderDate BETWEEN @FECINI AND @FECFEC
		AND D.ProductID = @PRODUCTID
	GROUP BY D.ProductID, H.OrderDate

	DECLARE @ORDEN_INI INT = 1, @ORDEN_FIN INT = (SELECT MAX(ORDEN) FROM @ANALISIS)

	WHILE @ORDEN_INI <= @ORDEN_FIN
	BEGIN
	--	SELECT * FROM #TEMP WHERE ORDEN = @ORDEN_INI
		UPDATE @ANALISIS
		SET LineTotalAcum = LineTotal + COALESCE((SELECT LineTotalAcum FROM @ANALISIS WHERE ORDEN = @ORDEN_INI - 1), 0)
		WHERE ORDEN = @ORDEN_INI

		SET @ORDEN_INI = @ORDEN_INI + 1  
	END

	RETURN
END
GO

SELECT ProductID, OrderDate, LineTotal, LineTotalAcum   
FROM uTF_Analisis_Producto('20110701','20110731',749)